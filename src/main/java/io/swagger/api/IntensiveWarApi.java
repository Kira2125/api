/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-03-31T19:25:47.602Z")

@Validated
@Api(value = "intensive_war", description = "the intensive_war API")
@RequestMapping(value = "")
public interface IntensiveWarApi {

    @ApiOperation(value = "deleteUser", nickname = "deleteUserUsingDELETE", notes = "", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/intensive_war/users/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllUsers", nickname = "getAllUsersUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/intensive_war/users",
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getAllUsersUsingGET();


    @ApiOperation(value = "getOneUser", nickname = "getOneUserUsingGET", notes = "", response = User.class, tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/intensive_war/users/{id}",
        method = RequestMethod.GET)
    ResponseEntity<User> getOneUserUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "insertUser", nickname = "insertUserUsingPOST", notes = "", response = User.class, tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/intensive_war/users",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> insertUserUsingPOST(@ApiParam(value = "user" ,required=true )  @Valid @RequestBody User user);


    @ApiOperation(value = "insertUser", nickname = "insertUserUsingPOST", notes = "", response = User.class, tags={ "user-controller", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = User.class),
            @ApiResponse(code = 201, message = "Created"),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 403, message = "Forbidden"),
            @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/intensive_war/users/{id}",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<User> insertUserUsingPUT(@ApiParam(value = "user" ,required=true )  @Valid @RequestBody User user,
                                            @ApiParam(value = "id",required=true) @PathVariable("id") Long id);
}
